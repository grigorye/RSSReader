//
//  Activity.swift
//  Loggy
//
//  Created by Zachary Waldowski on 8/21/16.
//  Copyright Â© 2016-2017 Big Nerd Ranch. Licensed under MIT.
//

import os.activity

/// Groups together code executing in response to a certain event, no matter on
/// what queues nor in what processes that code is executing.
///
/// Activities form a stack, including several activities defined by the
/// platform, such as button taps in UIKit.
///
/// Activities are logged into crash reports and are implicitly associated
/// with log messages. You can view the hierarchy of activities in your app by
/// using the "Activities" mode in the toolbar of Console app.
///
/// For more info:
/// - https://www.objc.io/issues/19-debugging/activity-tracing/
/// - https://developer.apple.com/videos/play/wwdc2016/721
public struct Activity {

    /// Support flags for Activity.
    public struct Options: OptionSet {

        public typealias RawValue = os_activity_flag_t.RawValue

        public let rawValue: RawValue
        public init(rawValue: RawValue) {
            self.rawValue = rawValue
        }

        private init(_ flag: os_activity_flag_t) {
            self.rawValue = flag.rawValue
        }

        /// Detach a newly created activity from a parent activity, if any.
        ///
        /// If passed in conjunction with a parent activity, the activity will
        /// only note the parent "created" the new one, but will make the new
        /// activity top-level. This allows seeing what activity triggered work
        /// without actually relating the activities.
        ///
        /// Example use: a refresh control manually triggers a sync process that
        /// otherwise runs automatically. While logging, it is more useful to
        /// see that the sync process began than the actions that led up to it.
        public static let detached = Options(OS_ACTIVITY_FLAG_DETACHED)

        /// Will only create a new activity if none present.
        ///
        /// If an activity ID is already present, a new activity will be
        /// returned with the same underlying activity ID.
        ///
        /// Example use: you want to know when a class of database object is
        /// being created, but not if it's already in the context of a CRUD
        /// loop.
        public static let ifNonePresent = Options(OS_ACTIVITY_FLAG_IF_NONE_PRESENT)
    }

    fileprivate let reference: os_activity_t

    fileprivate init(_ reference: os_activity_t) {
        self.reference = reference
    }

    /// Creates a new activity.
    ///
    /// - parameter label: A description for the group of code.
    /// - parameter parent: Defines the owning activity in the stack, either
    ///   from a known other activity, or one of the global activity constants.
    ///   Defaults to the currently in-scope activity.
    /// - parameter options: Modifies the behavior of the new activity with
    ///   respect to the activity stack.
    /// - parameter dso: The shared object handle, used by the OS to record
    ///   extra debugging information. The default is the module where the
    ///   activity was created.
    public init(named name: StaticString, parent: Activity = .current, options: Options = [], containingBinary dso: UnsafeRawPointer = #dsohandle) {
        self.reference = name.withUTF8Buffer { (buffer) in
            loggy_os_activity_create(dso, buffer.baseAddress, parent.reference, os_activity_flag_t(rawValue: options.rawValue))
        }
    }

    /// Executes a function `body` within the context of the activity.
    public func execute<Return>(_ body: () throws -> Return) rethrows -> Return {
        func impl(execute work: () throws -> Return, recover: (Error) throws -> Return) rethrows -> Return {
            var result: Return!
            var error: Error?

            os_activity_apply(reference) {
                do {
                    result = try work()
                } catch let e {
                    error = e
                }
            }

            if let e = error {
                return try recover(e)
            } else {
                return result!
            }
        }

        return try impl(execute: body, recover: { throw $0 })
    }

    /// Executes a named group of code `body` under a `label`.
    public static func label<Return>(_ label: StaticString, parent: Activity = .current, options: Options = [], containingBinary dso: UnsafeRawPointer = #dsohandle, execute body: () throws -> Return) rethrows -> Return {
        let activity = Activity(named: label, parent: parent, options: options, containingBinary: dso)
        return try activity.execute(body)
    }
    
}

extension Activity {

    /// Label an activity auto-generated by UI with a name that is useful for
    /// debugging macro-level user actions.
    ///
    /// This function should be called early within the scope of an `IBAction`,
    /// before any sub-activities are created. The name provided will be shown
    /// in tools in addition to the system-provided name. This API should only
    /// be called once, and only on an activity created by the system. These
    /// actions help determine workflow of the user in order to reproduce
    /// problems that occur.
    ///
    /// For example, a control press and/or menu item selection can be labeled:
    ///
    ///    Activity.labelUserAction("New mail message")
    ///    Activity.labelUserAction("Empty trash")
    ///
    /// Where the underlying name will be "gesture:" or "menuSelect:".
    public static func labelUserAction(_ description: StaticString, fromContainingBinary dso: UnsafeRawPointer = #dsohandle) {
        description.withUTF8Buffer { (buffer) in
            loggy_os_activity_label_useraction(dso, buffer.baseAddress)
        }
    }

    /// An activity with no traits; as a parent, it is equivalent to a
    /// detached activity.
    public static var none: Activity {
        return Activity(loggy_os_activity_none())
    }

    /// The running activity.
    ///
    /// As a parent, the new activity is linked to the current activity, if one
    /// is present. If no activity is present, it behaves the same as `.none`.
    public static var current: Activity {
        return Activity(loggy_os_activity_current())
    }

}
