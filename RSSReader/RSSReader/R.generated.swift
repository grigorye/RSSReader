//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 3 files.
  struct file {
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")
    /// Resource file `ItemSummaryTemplate.html`.
    static let itemSummaryTemplateHtml = Rswift.FileResource(bundle: R.hostingBundle, name: "ItemSummaryTemplate", pathExtension: "html")
    /// Resource file `Settings.bundle`.
    static let settingsBundle = Rswift.FileResource(bundle: R.hostingBundle, name: "Settings", pathExtension: "bundle")
    
    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "ItemSummaryTemplate", withExtension: "html")`
    static func itemSummaryTemplateHtml(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.itemSummaryTemplateHtml
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Settings", withExtension: "bundle")`
    static func settingsBundle(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.settingsBundle
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 6 images.
  struct image {
    /// Image `Box-Selected`.
    static let boxSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "Box-Selected")
    /// Image `Box`.
    static let box = Rswift.ImageResource(bundle: R.hostingBundle, name: "Box")
    /// Image `Download`.
    static let download = Rswift.ImageResource(bundle: R.hostingBundle, name: "Download")
    /// Image `Settings`.
    static let settings = Rswift.ImageResource(bundle: R.hostingBundle, name: "Settings")
    /// Image `Star`.
    static let star = Rswift.ImageResource(bundle: R.hostingBundle, name: "Star")
    /// Image `Unstar`.
    static let unstar = Rswift.ImageResource(bundle: R.hostingBundle, name: "Unstar")
    
    /// `UIImage(named: "Box", bundle: ..., traitCollection: ...)`
    static func box(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.box, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Box-Selected", bundle: ..., traitCollection: ...)`
    static func boxSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.boxSelected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Download", bundle: ..., traitCollection: ...)`
    static func download(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.download, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Settings", bundle: ..., traitCollection: ...)`
    static func settings(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settings, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Star", bundle: ..., traitCollection: ...)`
    static func star(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.star, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Unstar", bundle: ..., traitCollection: ...)`
    static func unstar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.unstar, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 12 nibs.
  struct nib {
    /// Nib `ContainerTableViewSectionHeader`.
    static let containerTableViewSectionHeader = _R.nib._ContainerTableViewSectionHeader()
    /// Nib `ItemSimpleTableViewCell`.
    static let itemSimpleTableViewCell = _R.nib._ItemSimpleTableViewCell()
    /// Nib `ItemTableViewCell-0`.
    static let itemTableViewCell0 = _R.nib._ItemTableViewCell0()
    /// Nib `ItemTableViewCell-1`.
    static let itemTableViewCell1 = _R.nib._ItemTableViewCell1()
    /// Nib `ItemTableViewCell-2`.
    static let itemTableViewCell2 = _R.nib._ItemTableViewCell2()
    /// Nib `ItemTableViewCell-3`.
    static let itemTableViewCell3 = _R.nib._ItemTableViewCell3()
    /// Nib `ItemTableViewCell-4`.
    static let itemTableViewCell4 = _R.nib._ItemTableViewCell4()
    /// Nib `ItemTableViewCell-5`.
    static let itemTableViewCell5 = _R.nib._ItemTableViewCell5()
    /// Nib `ItemTableViewCell-6`.
    static let itemTableViewCell6 = _R.nib._ItemTableViewCell6()
    /// Nib `ItemTableViewCell`.
    static let itemTableViewCell = _R.nib._ItemTableViewCell()
    /// Nib `ItemTableViewFooter`.
    static let itemTableViewFooter = _R.nib._ItemTableViewFooter()
    /// Nib `LaunchScreen`.
    static let launchScreen = _R.nib._LaunchScreen()
    
    /// `UINib(name: "ContainerTableViewSectionHeader", in: bundle)`
    static func containerTableViewSectionHeader(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.containerTableViewSectionHeader)
    }
    
    /// `UINib(name: "ItemSimpleTableViewCell", in: bundle)`
    static func itemSimpleTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.itemSimpleTableViewCell)
    }
    
    /// `UINib(name: "ItemTableViewCell", in: bundle)`
    static func itemTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.itemTableViewCell)
    }
    
    /// `UINib(name: "ItemTableViewCell-0", in: bundle)`
    static func itemTableViewCell0(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.itemTableViewCell0)
    }
    
    /// `UINib(name: "ItemTableViewCell-1", in: bundle)`
    static func itemTableViewCell1(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.itemTableViewCell1)
    }
    
    /// `UINib(name: "ItemTableViewCell-2", in: bundle)`
    static func itemTableViewCell2(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.itemTableViewCell2)
    }
    
    /// `UINib(name: "ItemTableViewCell-3", in: bundle)`
    static func itemTableViewCell3(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.itemTableViewCell3)
    }
    
    /// `UINib(name: "ItemTableViewCell-4", in: bundle)`
    static func itemTableViewCell4(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.itemTableViewCell4)
    }
    
    /// `UINib(name: "ItemTableViewCell-5", in: bundle)`
    static func itemTableViewCell5(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.itemTableViewCell5)
    }
    
    /// `UINib(name: "ItemTableViewCell-6", in: bundle)`
    static func itemTableViewCell6(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.itemTableViewCell6)
    }
    
    /// `UINib(name: "ItemTableViewFooter", in: bundle)`
    static func itemTableViewFooter(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.itemTableViewFooter)
    }
    
    /// `UINib(name: "LaunchScreen", in: bundle)`
    static func launchScreen(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.launchScreen)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 10 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `Folder`.
    static let folder: Rswift.ReuseIdentifier<TableViewContainerCell> = Rswift.ReuseIdentifier(identifier: "Folder")
    /// Reuse identifier `Item-0`.
    static let item0: Rswift.ReuseIdentifier<ItemTableViewCell> = Rswift.ReuseIdentifier(identifier: "Item-0")
    /// Reuse identifier `Item-1`.
    static let item1: Rswift.ReuseIdentifier<ItemTableViewCell> = Rswift.ReuseIdentifier(identifier: "Item-1")
    /// Reuse identifier `Item-2`.
    static let item2: Rswift.ReuseIdentifier<ItemTableViewCell> = Rswift.ReuseIdentifier(identifier: "Item-2")
    /// Reuse identifier `Item-3`.
    static let item3: Rswift.ReuseIdentifier<ItemTableViewCell> = Rswift.ReuseIdentifier(identifier: "Item-3")
    /// Reuse identifier `Item-4`.
    static let item4: Rswift.ReuseIdentifier<ItemTableViewCell> = Rswift.ReuseIdentifier(identifier: "Item-4")
    /// Reuse identifier `Item-5`.
    static let item5: Rswift.ReuseIdentifier<ItemTableViewCell> = Rswift.ReuseIdentifier(identifier: "Item-5")
    /// Reuse identifier `Item-6`.
    static let item6: Rswift.ReuseIdentifier<ItemTableViewCell> = Rswift.ReuseIdentifier(identifier: "Item-6")
    /// Reuse identifier `Item`.
    static let item: Rswift.ReuseIdentifier<ItemTableViewCell> = Rswift.ReuseIdentifier(identifier: "Item")
    /// Reuse identifier `Subscription`.
    static let subscription: Rswift.ReuseIdentifier<TableViewContainerCell> = Rswift.ReuseIdentifier(identifier: "Subscription")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 4 view controllers.
  struct segue {
    /// This struct is generated for `FoldersViewController`, and contains static references to 3 segues.
    struct foldersViewController {
      /// Segue identifier `showCombined`.
      static let showCombined: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, FoldersViewController, ItemsViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showCombined")
      /// Segue identifier `showFolder`.
      static let showFolder: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, FoldersViewController, FoldersViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showFolder")
      /// Segue identifier `showSubscription`.
      static let showSubscription: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, FoldersViewController, ItemsViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showSubscription")
      
      /// Optionally returns a typed version of segue `showCombined`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showCombined(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, FoldersViewController, ItemsViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.foldersViewController.showCombined, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `showFolder`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showFolder(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, FoldersViewController, FoldersViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.foldersViewController.showFolder, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `showSubscription`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showSubscription(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, FoldersViewController, ItemsViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.foldersViewController.showSubscription, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `HistoryViewController`, and contains static references to 2 segues.
    struct historyViewController {
      /// Segue identifier `showListArticle`.
      static let showListArticle: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, HistoryViewController, ItemSummaryWebViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showListArticle")
      /// Segue identifier `showListPages`.
      static let showListPages: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, HistoryViewController, UIKit.UINavigationController> = Rswift.StoryboardSegueIdentifier(identifier: "showListPages")
      
      /// Optionally returns a typed version of segue `showListArticle`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showListArticle(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, HistoryViewController, ItemSummaryWebViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.historyViewController.showListArticle, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `showListPages`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showListPages(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, HistoryViewController, UIKit.UINavigationController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.historyViewController.showListPages, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `HomeViewController`, and contains static references to 4 segues.
    struct homeViewController {
      /// Segue identifier `showDebug`.
      static let showDebug: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, HomeViewController, UIKit.UITableViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showDebug")
      /// Segue identifier `showFavorites`.
      static let showFavorites: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, HomeViewController, ItemsViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showFavorites")
      /// Segue identifier `showHistory`.
      static let showHistory: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, HomeViewController, HistoryViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showHistory")
      /// Segue identifier `showSubscriptions`.
      static let showSubscriptions: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, HomeViewController, FoldersViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showSubscriptions")
      
      /// Optionally returns a typed version of segue `showDebug`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showDebug(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, HomeViewController, UIKit.UITableViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.homeViewController.showDebug, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `showFavorites`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showFavorites(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, HomeViewController, ItemsViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.homeViewController.showFavorites, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `showHistory`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showHistory(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, HomeViewController, HistoryViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.homeViewController.showHistory, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `showSubscriptions`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showSubscriptions(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, HomeViewController, FoldersViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.homeViewController.showSubscriptions, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `ItemsViewController`, and contains static references to 2 segues.
    struct itemsViewController {
      /// Segue identifier `showListArticle`.
      static let showListArticle: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, ItemsViewController, ItemSummaryWebViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showListArticle")
      /// Segue identifier `showListPages`.
      static let showListPages: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, ItemsViewController, UIKit.UINavigationController> = Rswift.StoryboardSegueIdentifier(identifier: "showListPages")
      
      /// Optionally returns a typed version of segue `showListArticle`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showListArticle(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, ItemsViewController, ItemSummaryWebViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.itemsViewController.showListArticle, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `showListPages`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showListPages(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, ItemsViewController, UIKit.UINavigationController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.itemsViewController.showListPages, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `Debug`.
    static let debug = _R.storyboard.debug()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "Debug", bundle: ...)`
    static func debug(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.debug)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 4 localization tables.
  struct string {
    /// This `R.string.infoPlist` struct is generated, and contains static references to 1 localization keys.
    struct infoPlist {
      /// Base translation: NFeeds
      /// 
      /// Locales: Base, ru
      static let cfBundleDisplayName = Rswift.StringResource(key: "CFBundleDisplayName", tableName: "InfoPlist", bundle: R.hostingBundle, locales: ["Base", "ru"], comment: nil)
      
      /// Base translation: NFeeds
      /// 
      /// Locales: Base, ru
      static func cfBundleDisplayName(_: Void = ()) -> String {
        return NSLocalizedString("CFBundleDisplayName", tableName: "InfoPlist", bundle: R.hostingBundle, value: "NFeeds", comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.launchScreen` struct is generated, and contains static references to 1 localization keys.
    struct launchScreen {
      /// ru translation: NFeeds
      /// 
      /// Locales: ru, ru
      static let kIdC2RCXText = Rswift.StringResource(key: "kId-c2-rCX.text", tableName: "LaunchScreen", bundle: R.hostingBundle, locales: ["ru", "ru"], comment: nil)
      
      /// ru translation: NFeeds
      /// 
      /// Locales: ru, ru
      static func kIdC2RCXText(_: Void = ()) -> String {
        return NSLocalizedString("kId-c2-rCX.text", tableName: "LaunchScreen", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.localizable` struct is generated, and contains static references to 37 localization keys.
    struct localizable {
      /// ru translation: Все отмечено как прочитанное.
      /// 
      /// Locales: ru
      static let markedAllAsRead = Rswift.StringResource(key: "Marked all as read.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Вы не подключены к аккаунту.
      /// 
      /// Locales: ru
      static let youAreNotLoggedIn = Rswift.StringResource(key: "You are not logged in.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Для подключения аккаунта воспользуйтесь настройками программы.
      /// 
      /// Locales: ru
      static let toEnableLoginOpenThisAppSSettingsAndFillLoginAndPassword = Rswift.StringResource(key: "To enable login, open this app's settings and fill \"Login and Password\".", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Для синхронизации нужно зарегистрироваться.
      /// 
      /// Locales: ru
      static let toSyncYouShouldBeLoggedIn = Rswift.StringResource(key: "To sync you should be logged in.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Для того, чтобы изменить имя пользователя или пароль, воспользуйтесь  настройками программы.
      /// 
      /// Locales: ru
      static let toAdjustTheUsernameOrPasswordOpenThisAppSSettingsAndEditLoginAndPassword = Rswift.StringResource(key: "To adjust the username or password, open this app's settings and edit \"Login and Password\".", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Добавить в избранное
      /// 
      /// Locales: ru
      static let addToFavorites = Rswift.StringResource(key: "Add to Favorites", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Завершено
      /// 
      /// Locales: ru
      static let completed = Rswift.StringResource(key: "Completed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Избранное
      /// 
      /// Locales: ru
      static let favorites = Rswift.StringResource(key: "Favorites", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Не удалось отметить все как прочитанное. %@
      /// 
      /// Locales: ru
      static let failedToMarkAllAsRead = Rswift.StringResource(key: "Failed to mark all as read. %@", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Не удалось получить весь текст
      /// 
      /// Locales: ru
      static let unableToExpand = Rswift.StringResource(key: "Unable to expand", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Не удалось получить короткую версию
      /// 
      /// Locales: ru
      static let unableToLoadSummary = Rswift.StringResource(key: "Unable to load summary", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Невозможно продолжить, т.к. имя пользователя или пароль не верны.
      /// 
      /// Locales: ru
      static let couldNotProceedAsUsernameOrPasswordIsInvalid = Rswift.StringResource(key: "Could not proceed as username or password is invalid.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Невозможно продолжить, т.к. отсутствует информация об аккаунте.
      /// 
      /// Locales: ru
      static let couldNotProceedAsAccountInformationIsMissing = Rswift.StringResource(key: "Could not proceed as account information is missing.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Неизвестно
      /// 
      /// Locales: ru
      static let unknown = Rswift.StringResource(key: "Unknown", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Никогда не обновлялось
      /// 
      /// Locales: ru
      static let notUpdatedBefore = Rswift.StringResource(key: "Not updated before", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Обновление персональных настроек
      /// 
      /// Locales: ru
      static let updatingUserInfo = Rswift.StringResource(key: "Updating User Info", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Обновление подписок
      /// 
      /// Locales: ru
      static let updatingSubscriptions = Rswift.StringResource(key: "Updating Subscriptions", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Обновление списка папок
      /// 
      /// Locales: ru
      static let updatingFolderList = Rswift.StringResource(key: "Updating Folder List", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Обновление счетчиков непрочитанного
      /// 
      /// Locales: ru
      static let updatingUnreadCounts = Rswift.StringResource(key: "Updating Unread Counts", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Обновлено %@ назад
      /// 
      /// Locales: ru
      static let ago = Rswift.StringResource(key: "%@ ago", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Обновлено %@ назад
      /// 
      /// Locales: ru
      static let updatedAgo = Rswift.StringResource(key: "Updated %@ ago", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Открыть в Safari
      /// 
      /// Locales: ru
      static let openInSafari = Rswift.StringResource(key: "Open in Safari", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Открыть настройки
      /// 
      /// Locales: ru
      static let openSettings = Rswift.StringResource(key: "Open Settings", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Отменить
      /// 
      /// Locales: ru
      static let cancel = Rswift.StringResource(key: "Cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Отметить все как прочитанное
      /// 
      /// Locales: ru
      static let markAllAsRead = Rswift.StringResource(key: "Mark All as Read", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Отправка тэгов
      /// 
      /// Locales: ru
      static let pushingTags = Rswift.StringResource(key: "Pushing Tags", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Ошибка обновления
      /// 
      /// Locales: ru
      static let refreshFailed = Rswift.StringResource(key: "Refresh Failed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Повторить
      /// 
      /// Locales: ru
      static let retry = Rswift.StringResource(key: "Retry", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Подключение
      /// 
      /// Locales: ru
      static let authenticating = Rswift.StringResource(key: "Authenticating", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Получение тэгов
      /// 
      /// Locales: ru
      static let pullingTags = Rswift.StringResource(key: "Pulling Tags", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Предварительное скачивание
      /// 
      /// Locales: ru
      static let prefetching = Rswift.StringResource(key: "Prefetching", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Сбой авторизации
      /// 
      /// Locales: ru
      static let authenticationFailed = Rswift.StringResource(key: "Authentication Failed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Сбой загрузки. %@
      /// 
      /// Locales: ru
      static let failedToLoadMore = Rswift.StringResource(key: "Failed to load more. %@", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Только что
      /// 
      /// Locales: ru
      static let justNow = Rswift.StringResource(key: "Just now", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Что-то пошло не так.
      /// 
      /// Locales: ru
      static let somethingWentWrong = Rswift.StringResource(key: "Something went wrong.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Что-то пошло не так. Загруженные данные будут удалены.
      /// 
      /// Locales: ru
      static let somethingWentWrongOfflineDataHasBeenErased = Rswift.StringResource(key: "Something went wrong. Offline data has been erased.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Что-то пошло не так. Загруженные данные могут быть недоступны. Переустановите программу чтобы избежать проблем в будущем.
      /// 
      /// Locales: ru
      static let somethingWentWrongOfflineDataMightBeUnavailablePleaseReInstallTheApplicationToAvoidFurtherProblems = Rswift.StringResource(key: "Something went wrong. Offline data might be unavailable. Please re-install the application to avoid further problems.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      
      /// ru translation: Все отмечено как прочитанное.
      /// 
      /// Locales: ru
      static func markedAllAsRead(_: Void = ()) -> String {
        return NSLocalizedString("Marked all as read.", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Вы не подключены к аккаунту.
      /// 
      /// Locales: ru
      static func youAreNotLoggedIn(_: Void = ()) -> String {
        return NSLocalizedString("You are not logged in.", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Для подключения аккаунта воспользуйтесь настройками программы.
      /// 
      /// Locales: ru
      static func toEnableLoginOpenThisAppSSettingsAndFillLoginAndPassword(_: Void = ()) -> String {
        return NSLocalizedString("To enable login, open this app's settings and fill \"Login and Password\".", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Для синхронизации нужно зарегистрироваться.
      /// 
      /// Locales: ru
      static func toSyncYouShouldBeLoggedIn(_: Void = ()) -> String {
        return NSLocalizedString("To sync you should be logged in.", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Для того, чтобы изменить имя пользователя или пароль, воспользуйтесь  настройками программы.
      /// 
      /// Locales: ru
      static func toAdjustTheUsernameOrPasswordOpenThisAppSSettingsAndEditLoginAndPassword(_: Void = ()) -> String {
        return NSLocalizedString("To adjust the username or password, open this app's settings and edit \"Login and Password\".", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Добавить в избранное
      /// 
      /// Locales: ru
      static func addToFavorites(_: Void = ()) -> String {
        return NSLocalizedString("Add to Favorites", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Завершено
      /// 
      /// Locales: ru
      static func completed(_: Void = ()) -> String {
        return NSLocalizedString("Completed", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Избранное
      /// 
      /// Locales: ru
      static func favorites(_: Void = ()) -> String {
        return NSLocalizedString("Favorites", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Не удалось отметить все как прочитанное. %@
      /// 
      /// Locales: ru
      static func failedToMarkAllAsRead(_ value1: String) -> String {
        return String(format: NSLocalizedString("Failed to mark all as read. %@", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// ru translation: Не удалось получить весь текст
      /// 
      /// Locales: ru
      static func unableToExpand(_: Void = ()) -> String {
        return NSLocalizedString("Unable to expand", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Не удалось получить короткую версию
      /// 
      /// Locales: ru
      static func unableToLoadSummary(_: Void = ()) -> String {
        return NSLocalizedString("Unable to load summary", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Невозможно продолжить, т.к. имя пользователя или пароль не верны.
      /// 
      /// Locales: ru
      static func couldNotProceedAsUsernameOrPasswordIsInvalid(_: Void = ()) -> String {
        return NSLocalizedString("Could not proceed as username or password is invalid.", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Невозможно продолжить, т.к. отсутствует информация об аккаунте.
      /// 
      /// Locales: ru
      static func couldNotProceedAsAccountInformationIsMissing(_: Void = ()) -> String {
        return NSLocalizedString("Could not proceed as account information is missing.", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Неизвестно
      /// 
      /// Locales: ru
      static func unknown(_: Void = ()) -> String {
        return NSLocalizedString("Unknown", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Никогда не обновлялось
      /// 
      /// Locales: ru
      static func notUpdatedBefore(_: Void = ()) -> String {
        return NSLocalizedString("Not updated before", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Обновление персональных настроек
      /// 
      /// Locales: ru
      static func updatingUserInfo(_: Void = ()) -> String {
        return NSLocalizedString("Updating User Info", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Обновление подписок
      /// 
      /// Locales: ru
      static func updatingSubscriptions(_: Void = ()) -> String {
        return NSLocalizedString("Updating Subscriptions", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Обновление списка папок
      /// 
      /// Locales: ru
      static func updatingFolderList(_: Void = ()) -> String {
        return NSLocalizedString("Updating Folder List", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Обновление счетчиков непрочитанного
      /// 
      /// Locales: ru
      static func updatingUnreadCounts(_: Void = ()) -> String {
        return NSLocalizedString("Updating Unread Counts", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Обновлено %@ назад
      /// 
      /// Locales: ru
      static func ago(_ value1: String) -> String {
        return String(format: NSLocalizedString("%@ ago", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// ru translation: Обновлено %@ назад
      /// 
      /// Locales: ru
      static func updatedAgo(_ value1: String) -> String {
        return String(format: NSLocalizedString("Updated %@ ago", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// ru translation: Открыть в Safari
      /// 
      /// Locales: ru
      static func openInSafari(_: Void = ()) -> String {
        return NSLocalizedString("Open in Safari", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Открыть настройки
      /// 
      /// Locales: ru
      static func openSettings(_: Void = ()) -> String {
        return NSLocalizedString("Open Settings", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Отменить
      /// 
      /// Locales: ru
      static func cancel(_: Void = ()) -> String {
        return NSLocalizedString("Cancel", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Отметить все как прочитанное
      /// 
      /// Locales: ru
      static func markAllAsRead(_: Void = ()) -> String {
        return NSLocalizedString("Mark All as Read", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Отправка тэгов
      /// 
      /// Locales: ru
      static func pushingTags(_: Void = ()) -> String {
        return NSLocalizedString("Pushing Tags", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Ошибка обновления
      /// 
      /// Locales: ru
      static func refreshFailed(_: Void = ()) -> String {
        return NSLocalizedString("Refresh Failed", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Повторить
      /// 
      /// Locales: ru
      static func retry(_: Void = ()) -> String {
        return NSLocalizedString("Retry", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Подключение
      /// 
      /// Locales: ru
      static func authenticating(_: Void = ()) -> String {
        return NSLocalizedString("Authenticating", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Получение тэгов
      /// 
      /// Locales: ru
      static func pullingTags(_: Void = ()) -> String {
        return NSLocalizedString("Pulling Tags", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Предварительное скачивание
      /// 
      /// Locales: ru
      static func prefetching(_: Void = ()) -> String {
        return NSLocalizedString("Prefetching", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Сбой авторизации
      /// 
      /// Locales: ru
      static func authenticationFailed(_: Void = ()) -> String {
        return NSLocalizedString("Authentication Failed", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Сбой загрузки. %@
      /// 
      /// Locales: ru
      static func failedToLoadMore(_ value1: String) -> String {
        return String(format: NSLocalizedString("Failed to load more. %@", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// ru translation: Только что
      /// 
      /// Locales: ru
      static func justNow(_: Void = ()) -> String {
        return NSLocalizedString("Just now", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Что-то пошло не так.
      /// 
      /// Locales: ru
      static func somethingWentWrong(_: Void = ()) -> String {
        return NSLocalizedString("Something went wrong.", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Что-то пошло не так. Загруженные данные будут удалены.
      /// 
      /// Locales: ru
      static func somethingWentWrongOfflineDataHasBeenErased(_: Void = ()) -> String {
        return NSLocalizedString("Something went wrong. Offline data has been erased.", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Что-то пошло не так. Загруженные данные могут быть недоступны. Переустановите программу чтобы избежать проблем в будущем.
      /// 
      /// Locales: ru
      static func somethingWentWrongOfflineDataMightBeUnavailablePleaseReInstallTheApplicationToAvoidFurtherProblems(_: Void = ()) -> String {
        return NSLocalizedString("Something went wrong. Offline data might be unavailable. Please re-install the application to avoid further problems.", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.main` struct is generated, and contains static references to 28 localization keys.
    struct main {
      /// ru translation:  
      /// 
      /// Locales: ru
      static let pG2FU3i2Title = Rswift.StringResource(key: "pG2-fU-3i2.title", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: BEG
      /// 
      /// Locales: ru
      static let vVvPxO6aTitle = Rswift.StringResource(key: "vVv-px-o6a.title", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Detail•
      /// 
      /// Locales: ru, ru
      static let aWhVLI4QText = Rswift.StringResource(key: "AWh-VL-I4Q.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru", "ru"], comment: nil)
      /// ru translation: Detail•
      /// 
      /// Locales: ru, ru
      static let iuNQWRUText = Rswift.StringResource(key: "8iu-NQ-WRU.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru", "ru"], comment: nil)
      /// ru translation: E
      /// 
      /// Locales: ru, ru
      static let frRCQJf5Title = Rswift.StringResource(key: "frR-cQ-Jf5.title", tableName: "Main", bundle: R.hostingBundle, locales: ["ru", "ru"], comment: nil)
      /// ru translation: END
      /// 
      /// Locales: ru
      static let i8SXQLSdTitle = Rswift.StringResource(key: "i8S-xQ-lSd.title", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Item
      /// 
      /// Locales: ru, ru
      static let eDc3UE5bTitle = Rswift.StringResource(key: "eDc-3U-E5b.title", tableName: "Main", bundle: R.hostingBundle, locales: ["ru", "ru"], comment: nil)
      /// ru translation: Label
      /// 
      /// Locales: ru, ru
      static let bC2ZFSCeText = Rswift.StringResource(key: "bC2-zF-sCe.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru", "ru"], comment: nil)
      /// ru translation: Label
      /// 
      /// Locales: ru, ru
      static let wVVRVZb5Text = Rswift.StringResource(key: "wVV-rV-Zb5.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru", "ru"], comment: nil)
      /// ru translation: MAR
      /// 
      /// Locales: ru, ru
      static let fEaK8CQPTitle = Rswift.StringResource(key: "FEa-k8-cQP.title", tableName: "Main", bundle: R.hostingBundle, locales: ["ru", "ru"], comment: nil)
      /// ru translation: R
      /// 
      /// Locales: ru, ru
      static let gnUABLLMTitle = Rswift.StringResource(key: "gnU-AB-lLM.title", tableName: "Main", bundle: R.hostingBundle, locales: ["ru", "ru"], comment: nil)
      /// ru translation: Title
      /// 
      /// Locales: ru, ru
      static let fgtYIK6MText = Rswift.StringResource(key: "Fgt-yI-K6M.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru", "ru"], comment: nil)
      /// ru translation: Title•
      /// 
      /// Locales: ru, ru
      static let t5YDFXAText = Rswift.StringResource(key: "3T5-yD-fXA.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru", "ru"], comment: nil)
      /// ru translation: U
      /// 
      /// Locales: ru, ru
      static let fgWkBy1NormalTitle = Rswift.StringResource(key: "1Fg-wk-by1.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["ru", "ru"], comment: nil)
      /// ru translation: U
      /// 
      /// Locales: ru, ru
      static let y2KHr675NormalTitle = Rswift.StringResource(key: "Y2K-Hr-675.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["ru", "ru"], comment: nil)
      /// ru translation: Всё вместе
      /// 
      /// Locales: ru, ru
      static let zu6A2UhTTitle = Rswift.StringResource(key: "ZU6-a2-UhT.title", tableName: "Main", bundle: R.hostingBundle, locales: ["ru", "ru"], comment: nil)
      /// ru translation: Главное
      /// 
      /// Locales: ru, ru
      static let oXAIBjhTitle = Rswift.StringResource(key: "3oX-aI-Bjh.title", tableName: "Main", bundle: R.hostingBundle, locales: ["ru", "ru"], comment: nil)
      /// ru translation: Избранное
      /// 
      /// Locales: ru, ru
      static let w01H4Bt3Text = Rswift.StringResource(key: "W01-H4-Bt3.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru", "ru"], comment: nil)
      /// ru translation: История
      /// 
      /// Locales: ru, ru
      static let iin6C0VText = Rswift.StringResource(key: "1II-N6-C0V.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru", "ru"], comment: nil)
      /// ru translation: История
      /// 
      /// Locales: ru, ru
      static let qylH42jlTitle = Rswift.StringResource(key: "Qyl-H4-2jl.title", tableName: "Main", bundle: R.hostingBundle, locales: ["ru", "ru"], comment: nil)
      /// ru translation: Настройки
      /// 
      /// Locales: ru, ru
      static let aGKDDEHCTitle = Rswift.StringResource(key: "aGK-dD-eHC.title", tableName: "Main", bundle: R.hostingBundle, locales: ["ru", "ru"], comment: nil)
      /// ru translation: Настройки
      /// 
      /// Locales: ru, ru
      static let z7VW6NdyTitle = Rswift.StringResource(key: "Z7V-w6-ndy.title", tableName: "Main", bundle: R.hostingBundle, locales: ["ru", "ru"], comment: nil)
      /// ru translation: Ничего
      /// 
      /// Locales: ru
      static let r8d6DTsIText = Rswift.StringResource(key: "R8d-6D-TsI.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru"], comment: nil)
      /// ru translation: Обновить все
      /// 
      /// Locales: ru, ru
      static let u5iX6HdRTitle = Rswift.StringResource(key: "U5i-x6-HdR.title", tableName: "Main", bundle: R.hostingBundle, locales: ["ru", "ru"], comment: nil)
      /// ru translation: Подписки
      /// 
      /// Locales: ru, ru
      static let lbd0OText = Rswift.StringResource(key: "814-LB-d0O.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru", "ru"], comment: nil)
      /// ru translation: Подписки
      /// 
      /// Locales: ru, ru
      static let rhVDz5gATitle = Rswift.StringResource(key: "RhV-dz-5gA.title", tableName: "Main", bundle: R.hostingBundle, locales: ["ru", "ru"], comment: nil)
      /// ru translation: Разработчик
      /// 
      /// Locales: ru, ru
      static let aaaMh8VkTitle = Rswift.StringResource(key: "AAA-Mh-8Vk.title", tableName: "Main", bundle: R.hostingBundle, locales: ["ru", "ru"], comment: nil)
      /// ru translation: Разработчик
      /// 
      /// Locales: ru, ru
      static let qOuK3OJ2Text = Rswift.StringResource(key: "qOu-K3-OJ2.text", tableName: "Main", bundle: R.hostingBundle, locales: ["ru", "ru"], comment: nil)
      
      /// ru translation:  
      /// 
      /// Locales: ru
      static func pG2FU3i2Title(_: Void = ()) -> String {
        return NSLocalizedString("pG2-fU-3i2.title", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: BEG
      /// 
      /// Locales: ru
      static func vVvPxO6aTitle(_: Void = ()) -> String {
        return NSLocalizedString("vVv-px-o6a.title", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Detail•
      /// 
      /// Locales: ru, ru
      static func aWhVLI4QText(_: Void = ()) -> String {
        return NSLocalizedString("AWh-VL-I4Q.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Detail•
      /// 
      /// Locales: ru, ru
      static func iuNQWRUText(_: Void = ()) -> String {
        return NSLocalizedString("8iu-NQ-WRU.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: E
      /// 
      /// Locales: ru, ru
      static func frRCQJf5Title(_: Void = ()) -> String {
        return NSLocalizedString("frR-cQ-Jf5.title", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: END
      /// 
      /// Locales: ru
      static func i8SXQLSdTitle(_: Void = ()) -> String {
        return NSLocalizedString("i8S-xQ-lSd.title", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Item
      /// 
      /// Locales: ru, ru
      static func eDc3UE5bTitle(_: Void = ()) -> String {
        return NSLocalizedString("eDc-3U-E5b.title", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Label
      /// 
      /// Locales: ru, ru
      static func bC2ZFSCeText(_: Void = ()) -> String {
        return NSLocalizedString("bC2-zF-sCe.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Label
      /// 
      /// Locales: ru, ru
      static func wVVRVZb5Text(_: Void = ()) -> String {
        return NSLocalizedString("wVV-rV-Zb5.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: MAR
      /// 
      /// Locales: ru, ru
      static func fEaK8CQPTitle(_: Void = ()) -> String {
        return NSLocalizedString("FEa-k8-cQP.title", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: R
      /// 
      /// Locales: ru, ru
      static func gnUABLLMTitle(_: Void = ()) -> String {
        return NSLocalizedString("gnU-AB-lLM.title", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Title
      /// 
      /// Locales: ru, ru
      static func fgtYIK6MText(_: Void = ()) -> String {
        return NSLocalizedString("Fgt-yI-K6M.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Title•
      /// 
      /// Locales: ru, ru
      static func t5YDFXAText(_: Void = ()) -> String {
        return NSLocalizedString("3T5-yD-fXA.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: U
      /// 
      /// Locales: ru, ru
      static func fgWkBy1NormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("1Fg-wk-by1.normalTitle", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: U
      /// 
      /// Locales: ru, ru
      static func y2KHr675NormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("Y2K-Hr-675.normalTitle", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Всё вместе
      /// 
      /// Locales: ru, ru
      static func zu6A2UhTTitle(_: Void = ()) -> String {
        return NSLocalizedString("ZU6-a2-UhT.title", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Главное
      /// 
      /// Locales: ru, ru
      static func oXAIBjhTitle(_: Void = ()) -> String {
        return NSLocalizedString("3oX-aI-Bjh.title", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Избранное
      /// 
      /// Locales: ru, ru
      static func w01H4Bt3Text(_: Void = ()) -> String {
        return NSLocalizedString("W01-H4-Bt3.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: История
      /// 
      /// Locales: ru, ru
      static func iin6C0VText(_: Void = ()) -> String {
        return NSLocalizedString("1II-N6-C0V.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: История
      /// 
      /// Locales: ru, ru
      static func qylH42jlTitle(_: Void = ()) -> String {
        return NSLocalizedString("Qyl-H4-2jl.title", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Настройки
      /// 
      /// Locales: ru, ru
      static func aGKDDEHCTitle(_: Void = ()) -> String {
        return NSLocalizedString("aGK-dD-eHC.title", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Настройки
      /// 
      /// Locales: ru, ru
      static func z7VW6NdyTitle(_: Void = ()) -> String {
        return NSLocalizedString("Z7V-w6-ndy.title", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Ничего
      /// 
      /// Locales: ru
      static func r8d6DTsIText(_: Void = ()) -> String {
        return NSLocalizedString("R8d-6D-TsI.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Обновить все
      /// 
      /// Locales: ru, ru
      static func u5iX6HdRTitle(_: Void = ()) -> String {
        return NSLocalizedString("U5i-x6-HdR.title", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Подписки
      /// 
      /// Locales: ru, ru
      static func lbd0OText(_: Void = ()) -> String {
        return NSLocalizedString("814-LB-d0O.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Подписки
      /// 
      /// Locales: ru, ru
      static func rhVDz5gATitle(_: Void = ()) -> String {
        return NSLocalizedString("RhV-dz-5gA.title", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Разработчик
      /// 
      /// Locales: ru, ru
      static func aaaMh8VkTitle(_: Void = ()) -> String {
        return NSLocalizedString("AAA-Mh-8Vk.title", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// ru translation: Разработчик
      /// 
      /// Locales: ru, ru
      static func qOuK3OJ2Text(_: Void = ()) -> String {
        return NSLocalizedString("qOu-K3-OJ2.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    struct _ContainerTableViewSectionHeader: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ContainerTableViewSectionHeader"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ContainerTableViewSectionHeaderView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ContainerTableViewSectionHeaderView
      }
      
      fileprivate init() {}
    }
    
    struct _ItemSimpleTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ItemTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "Item"
      let name = "ItemSimpleTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ItemTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ItemTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _ItemTableViewCell0: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ItemTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "Item-0"
      let name = "ItemTableViewCell-0"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ItemTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ItemTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _ItemTableViewCell1: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ItemTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "Item-1"
      let name = "ItemTableViewCell-1"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ItemTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ItemTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _ItemTableViewCell2: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ItemTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "Item-2"
      let name = "ItemTableViewCell-2"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ItemTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ItemTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _ItemTableViewCell3: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ItemTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "Item-3"
      let name = "ItemTableViewCell-3"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ItemTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ItemTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _ItemTableViewCell4: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ItemTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "Item-4"
      let name = "ItemTableViewCell-4"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ItemTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ItemTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _ItemTableViewCell5: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ItemTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "Item-5"
      let name = "ItemTableViewCell-5"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ItemTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ItemTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _ItemTableViewCell6: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ItemTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "Item-6"
      let name = "ItemTableViewCell-6"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ItemTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ItemTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _ItemTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ItemTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "Item"
      let name = "ItemTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ItemTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ItemTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _ItemTableViewFooter: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ItemTableViewFooter"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _LaunchScreen: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try main.validate()
    }
    
    struct debug: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UITableViewController
      
      let bundle = R.hostingBundle
      let name = "Debug"
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UISplitViewController
      
      let bundle = R.hostingBundle
      let itemSummaryWeb = StoryboardViewControllerResource<ItemSummaryWebViewController>(identifier: "ItemSummaryWeb")
      let mainTabBar = StoryboardViewControllerResource<UIKit.UITabBarController>(identifier: "MainTabBar")
      let name = "Main"
      
      func itemSummaryWeb(_: Void = ()) -> ItemSummaryWebViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: itemSummaryWeb)
      }
      
      func mainTabBar(_: Void = ()) -> UIKit.UITabBarController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mainTabBar)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "Star") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Star' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Box") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Box' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Unstar") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Unstar' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Box-Selected") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Box-Selected' is used in storyboard 'Main', but couldn't be loaded.") }
        if _R.storyboard.main().mainTabBar() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mainTabBar' could not be loaded from storyboard 'Main' as 'UIKit.UITabBarController'.") }
        if _R.storyboard.main().itemSummaryWeb() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'itemSummaryWeb' could not be loaded from storyboard 'Main' as 'ItemSummaryWebViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
